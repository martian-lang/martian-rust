initSidebarItems({"constant":[["MARTIAN_TOKENS","Keywords used in the martian language. Using these keywords as mro field names is disallowed."]],"enum":[["MartianBlanketType","Primary Data type in martian + Arrays (which are derived from primary types)"],["MartianPrimaryType","Primary data types in Martian world"],["Volatile",""]],"struct":[["FiletypeHeader","The list of filetypes we list at the top of the mro. This struct is a simple wrapper around a HashSet of all file extensions."],["InAndOut","Input and outputs fields together"],["MroField","Each variable that is listed in the mro along with itâ€™s type form a `MroField`."],["MroUsing","Stuff that comes in the `using` section of a stage definition"],["StageMro","All the data needed to create a stage definition mro."],["StructDef",""],["StructHeader","All the structs that need to be defined in an mro"]],"trait":[["AsMartianBlanketType","A trait that defines how to convert this Rust type into an `MartianBlanketType`. Not all rust types can be converted to an `MartianBlanketType`. Not defined for"],["AsMartianPrimaryType","A trait that tells you how to convert a Rust data type to a basic Martian type."],["MartianStruct","A trait that defines how to expand a struct into a list of `MroField`s The `MartianStage` and `MartianMain` traits already has independent associated types for stage/chunk inputs and outputs. If those associated types implement this trait, then we can readily generate all the mro variables with the appropriate type and put them at the right place (withing stage def or chunk def)."],["MroDisplay","Defines how an entity that denotes some part of the mro is displayed"],["MroMaker","An object that can generate a `StageMro`"]]});